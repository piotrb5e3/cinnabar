l = [1, 2, 3, 4, 5];
{l0, l1, l2} = l;
assert l0 == 1 && l1 == 2 && l2 == 3;

l[0] = 123;
{l0, l1, l2} = l;
assert l0 == 123;

l[0] = l[0] + l[1] + l[l[1]];
assert l[0] == 128;

ll = [i ^ i ^ i for i in l];
assert ll[1] == 16;

z = l + ll;
assert ll.length == 5;

l0 = [x * 10 + y for {x, y} in [[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]]];
assert l0[4] == 12;
assert l0[1] == 2;

assert [1, 2, 3] * 3 == [1, 2, 3, 1, 2, 3, 1, 2, 3];
assert [1, 2, 3] != [1, 2, 4];
assert [1, 2, 3] != [99, 2, 3];
assert [1, 2, 3] != [1, 2, 3, 4];
assert [1, 2, 3, 4] != [1, 2, 3];

ll = [1,2,3,4];
ll2 = [[1, i, i^2, i^3] for i in ll];
assert ll2 == [[1,1,1,1], [1,2,4,8], [1,3,9,27], [1,4,16,64]];

o = extend object with #{"to_str": lambda self: str(self.foo)};
ll = [1,2,3];
ll2 = [str(o) for o.foo in ll];

assert o.foo == 3;
assert ll2 == ["1", "2", "3"];

assert [1] != ['a'];

print "OK\n";

