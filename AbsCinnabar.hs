

module AbsCinnabar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Stmt]
  deriving (Eq, Ord, Show, Read)

data Block = SBlock [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SWhile Expr Block
    | SCond Expr Block
    | SCondElse Expr Block Block
    | SAssing LVal Expr
    | SReturn Expr
    | SPrint Expr
    | SAssert Expr
    | SExpr Expr
  deriving (Eq, Ord, Show, Read)

data LVal
    = ATuple [LVal] | AAt Expr Expr | AMember Expr Ident | AVar Ident
  deriving (Eq, Ord, Show, Read)

data Expr
    = ELambda [Ident] Expr
    | EFun [Ident] Block
    | EIf Expr Expr Expr
    | EOr Expr Expr
    | EAnd Expr Expr
    | ERel Expr RelOp Expr
    | EAdd Expr AddOp Expr
    | EMul Expr MulOp Expr
    | EPow Expr Expr
    | ENot Expr
    | ENeg Expr
    | ECall Expr [Expr]
    | EMember Expr Ident
    | EAt Expr Expr
    | EExtend Expr Expr
    | ENew Expr [Expr]
    | EString String
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EVar Ident
    | EList [Expr]
    | EListComp Expr LVal Expr
    | EDict [DictMap]
  deriving (Eq, Ord, Show, Read)

data DictMap = EDictMap Expr Expr
  deriving (Eq, Ord, Show, Read)

data RelOp = Lt | Le | Gt | Ge | Eq | Ne
  deriving (Eq, Ord, Show, Read)

data AddOp = Add | Sub
  deriving (Eq, Ord, Show, Read)

data MulOp = Mul | Div | Mod
  deriving (Eq, Ord, Show, Read)

