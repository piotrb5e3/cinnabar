-- Programs -----------------------

entrypoints Program ;

Prog.      Program ::= [Stmt] ;

-- Statements ---------------------

SBlock.    Block ::= "{" [Stmt] "}";
separator  Stmt "" ;
SWhile.    Stmt ::= "while" "(" Expr ")" Block ;
SCond.     Stmt ::= "if" "(" Expr ")" Block ;
SCondElse. Stmt ::= "if" "(" Expr ")" Block "else" Block ;

SAssign.   Stmt ::= LVal "=" Expr ";" ;
_.         LVal ::= LVal1 ;
ATuple.    LVal ::= "{" [LVal1] "}";
separator  nonempty LVal1 "," ;
AAt.       LVal1 ::= Expr8 "[" Expr "]" ;
AMember.   LVal1 ::= Expr8 "." Ident ;
AVar.      LVal1 ::= Ident ;

SReturn.   Stmt ::= "return" Expr ";" ;
SPrint.    Stmt ::= "print" Expr ";" ;
SAssert.   Stmt ::= "assert" Expr ";" ;
SExpr.     Stmt ::= Expr ";" ;

-- Expressions --------------------

ELambda.   Expr ::= "lambda" [Ident] ":" Expr ;
EFun.      Expr ::= "fun" "(" [Ident] ")" Block ;
separator  Ident "," ;

EIf.       Expr ::= Expr1 "if" Expr "else" Expr ;
EOr.       Expr1 ::= Expr2 "||" Expr1 ;
EAnd.      Expr2 ::= Expr3 "&&" Expr2 ;
ERel.      Expr3 ::= Expr4 RelOp Expr4 ;
EAdd.      Expr4 ::= Expr4 AddOp Expr5 ;
EMul.      Expr5 ::= Expr5 MulOp Expr6 ;
EPow.      Expr6 ::= Expr6 "^" Expr7 ;
ENot.      Expr7 ::= "!" Expr7 ;
ENeg.      Expr7 ::= "-" Expr7 ;
ECall.     Expr8 ::= Expr8 "(" [Expr] ")" ;
EMember.   Expr8 ::= Expr8 "." Ident ;
EAt.       Expr8 ::= Expr8 "[" Expr "]" ;
EExtend.   Expr9 ::= "extend" Expr "with" Expr9 ;
ENew.      Expr9 ::= "new" Expr9 ;

EChar.     Expr10 ::= Char ;
EString.   Expr10 ::= String ;
ELitInt.   Expr10 ::= Integer ;
ELitTrue.  Expr10 ::= "true" ;
ELitFalse. Expr10 ::= "false" ;
EVar.      Expr10 ::= Ident ;
EList.     Expr10 ::= "[" [Expr] "]" ;
EListComp. Expr10 ::= "[" Expr "for" LVal "in" Expr "]" ;
separator Expr "," ;
EDict.     Expr10 ::= "#{" [DictMap]  "}" ;
EDictMap.  DictMap ::= Expr ":" Expr ;
separator DictMap "," ;

coercions  Expr 10 ;


-- Operators -----------------------

Lt.        RelOp ::= "<" ;
Le.        RelOp ::= "<=" ;
Gt.        RelOp ::= ">" ;
Ge.        RelOp ::= ">=" ;
Eq.        RelOp ::= "==" ;
Ne.        RelOp ::= "!=" ;

Add.       AddOp ::= "+" ;
Sub.       AddOp ::= "-" ;

Mul.       MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;

-- Comments -----------------------

comment    "//" ;
comment "/*" "*/" ;

