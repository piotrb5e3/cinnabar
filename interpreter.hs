-- automatically generated by BNF Converter
module Main where

import System.IO ( stderr, getContents, hPutStr, putStr )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import Control.Monad

import LexCinnabar
import ParCinnabar
import SkelCinnabar
import PrintCinnabar
import AbsCinnabar

import Builtins
import Program

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v p s = let ts = myLLexer s in case p ts of
  Bad s    -> do
    putStrLn "\nParse Failed...\n"
    putStrV v "Tokens:"
    putStrV v $ show ts
    putStrLn s
    exitFailure
  Ok  program -> do
    input <- getContents
    let initSt = initialState input
    let (stdo, stde, waserr) = runProgram program initSt
    putStr stdo
    hPutStr stderr stde
    if waserr
      then exitFailure
      else exitSuccess

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  FILE            Parse content of FILE."
    , "  -v FILE         Verbose mode. Parse content of file verbosely."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    ["-v", fname] -> runFile 2 pProgram fname
    [fname] -> runFile 0 pProgram fname
